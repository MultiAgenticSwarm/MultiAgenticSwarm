#!/usr/bin/env python3
"""
Flutter Music App Collaborative Creation Demo

This demo demonstrates:
1. Collaboration prompts guiding agent behavior and task delegation
2. Agents dynamically creating a Flutter app from scratch
3. Different delegation strategies (hierarchical, autonomous, collaborative)
4. Progress tracking and coordination through ProgressBoard
5. No hardcoded Flutter code - all generated by agents

Usage:
    python demo_collaborative_creation.py --strategy=collaborative
    python demo_collaborative_creation.py --strategy=hierarchical
    python demo_collaborative_creation.py --strategy=autonomous
"""

import asyncio
import argparse
import json
import os
import sys
import yaml
from pathlib import Path
from typing import Dict, List, Any, Optional

# Load environment variables
try:
    from dotenv import load_dotenv
    load_dotenv(Path(__file__).parent.parent.parent / ".env")
except ImportError:
    pass

# Add the project root to the path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from multiagenticswarm.tools.collaboration_tools import ProgressBoard
from multiagenticswarm.core.delegation import SimpleDelegator
from multiagenticswarm.core.collaborative_system import UniversalAgent, CollaborativeSystem


class FlutterAppCreationDemo:
    """Demonstrates collaborative Flutter app creation with different delegation strategies."""

    def __init__(self, workspace_dir: str, strategy: str = "collaborative"):
        self.workspace_dir = Path(workspace_dir)
        self.workspace_dir.mkdir(parents=True, exist_ok=True)

        self.strategy = strategy
        self.progress_board = ProgressBoard(workspace_dir=str(self.workspace_dir))
        self.system = CollaborativeSystem()

        # Load collaboration configuration
        self.config = self.load_config()
        self.collaboration_prompt = self.config['project']['collaboration_prompt']

        # Setup agents
        self.agents = self.create_agents()

        # Configure delegator with collaboration prompt
        self.delegator = SimpleDelegator(
            strategy=strategy,
            collaboration_prompt=self.collaboration_prompt,
            progress_board=self.progress_board
        )


    def load_config(self) -> Dict[str, Any]:
        """Load project configuration including collaboration prompt."""
        config_path = Path(__file__).parent / "config.yaml"
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)

    #what is a universal agent? all agents are universal agents
    def create_agents(self) -> List[UniversalAgent]:
        """Create specialized Flutter development agents."""
        agents = []

        for agent_config in self.config['agents']:
            agent = UniversalAgent(
                name=agent_config['name'],
                description=agent_config['description'],
                system_prompt=agent_config['system_prompt'],
                llm_provider="anthropic",  # Using Anthropic as requested
                llm_model="claude-3-5-sonnet-20241022",
                progress_board=self.progress_board,
                collaboration_prompt=self.collaboration_prompt
            )
            agents.append(agent)

        return agents

    #this should be done via agent tool
    async def initialize_flutter_project(self):
        """Create Flutter project structure."""
        print("üèóÔ∏è Initializing Flutter project structure...")

        flutter_project = self.workspace_dir / "flutter_music_app"

        # Create Flutter project directories
        dirs_to_create = [
            "lib",
            "lib/models",
            "lib/services",
            "lib/screens",
            "lib/widgets",
            "lib/providers",
            "lib/utils",
            "android",
            "ios",
            "test"
        ]

        for dir_path in dirs_to_create:
            (flutter_project / dir_path).mkdir(parents=True, exist_ok=True)

        # Create basic pubspec.yaml
        pubspec_content = """name: flutter_music_app
description: A music streaming app built by collaborative agents

publish_to: 'none'

version: 1.0.0+1

environment:
  sdk: '>=3.0.0 <4.0.0'
  flutter: ">=3.10.0"

dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2
  provider: ^6.0.5
  http: ^1.1.0
  shared_preferences: ^2.2.2
  audio_service: ^0.18.12
  just_audio: ^0.9.35

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0

flutter:
  uses-material-design: true
"""

        with open(flutter_project / "pubspec.yaml", "w") as f:
            f.write(pubspec_content)

        self.flutter_project_path = flutter_project
        print(f"‚úÖ Flutter project created at: {flutter_project}")

        return flutter_project

    async def demonstrate_collaboration_strategies(self):
        """Show how different delegation strategies work with collaboration prompts."""

        print(f"\nüéØ Demonstrating {self.strategy.upper()} Strategy")
        print("=" * 60)

        # Share collaboration prompt with all agents
        self.progress_board.post_update(
            agent_name="System",
            message=f"Starting collaborative Flutter app development using {self.strategy} strategy",
            update_type="system_announcement"
        )

        # Set the collaboration prompt in the progress board
        self.progress_board.set_collaboration_prompt(self.collaboration_prompt)

        # Define the main development task
        main_task = """
        Develop a complete Flutter music streaming application with these features:
        1. Modern Material Design 3 UI with playlist management
        2. Audio playback with controls (play, pause, skip, seek)
        3. User favorites and recently played functionality
        4. Search functionality for tracks and artists
        5. Offline mode support for downloaded tracks
        6. User profile and settings management

        Technical requirements:
        - Use Provider for state management
        - Implement clean architecture patterns
        - Follow Flutter best practices
        - Ensure responsive design
        - Add proper error handling
        - Include unit tests

        Each agent should focus on their specialty while following the collaboration rules.
        """

        # Delegate tasks based on strategy
        if self.strategy == "hierarchical":
            await self.run_hierarchical_delegation(main_task)
        elif self.strategy == "autonomous":
            await self.run_autonomous_delegation(main_task)
        elif self.strategy == "collaborative":
            await self.run_collaborative_delegation(main_task)
        else:
            raise ValueError(f"Unknown strategy: {self.strategy}")

    async def run_hierarchical_delegation(self, main_task: str):
        """Hierarchical delegation: Lead agent breaks down tasks and assigns them."""
        print("\nüëë HIERARCHICAL DELEGATION")
        print("Lead agent analyzes task and assigns specific subtasks...")

        # Designate UI agent as lead (could be configurable)
        lead_agent = self.agents[0]  # UI agent

        # Lead agent analyzes and breaks down the task
        analysis_prompt = f"""
        As the lead agent for this Flutter music app project, analyze this task and break it down into specific, actionable subtasks for each team member.

        MAIN TASK: {main_task}

        COLLABORATION PROMPT: {self.collaboration_prompt}

        Your team consists of:
        - Flutter_UI_Agent: UI/UX specialist
        - Flutter_Audio_Agent: Audio features specialist
        - Flutter_Data_Agent: Data models and state management specialist

        Break down the main task into specific subtasks for each agent. For each subtask, specify:
        1. Agent responsible
        2. Detailed description of what to build
        3. Dependencies on other subtasks
        4. Success criteria
        5. Estimated complexity

        Return your task breakdown as a JSON structure.
        """

        print(f"üß† {lead_agent.name} analyzing main task...")
        response = await lead_agent.execute(analysis_prompt)



        # Post analysis to progress board
        self.progress_board.post_update(
            agent_name=lead_agent.name,
            message="Completed task analysis and breakdown",
            update_type="task_analysis"
        )

        # Execute subtasks in order determined by lead agent
        await self.execute_agent_tasks_sequentially()

    async def run_autonomous_delegation(self, main_task: str):
        """Autonomous delegation: Each agent decides what they can contribute."""
        print("\nü§ù AUTONOMOUS DELEGATION")
        print("Each agent analyzes the main goal and proposes their contribution...")

        proposals = []

        # Each agent proposes what they will contribute
        for agent in self.agents:
            proposal_prompt = f"""
            Analyze this Flutter music app development task and propose what you will contribute based on your specialty and the collaboration guidelines.

            MAIN TASK: {main_task}

            COLLABORATION PROMPT: {self.collaboration_prompt}

            Based on your role as {agent.name} and the collaboration rules, propose:
            1. What specific components/features you will build
            2. What files you will create
            3. What interfaces you'll need from other agents
            4. What interfaces you'll provide to other agents
            5. Your estimated timeline

            Be specific about the Flutter code you will create.
            """

            print(f"üí≠ {agent.name} proposing contribution...")
            response = await agent.execute(proposal_prompt)

            proposal = {
                "agent": agent.name,
                "proposal": response.get('output', ''),
                "timestamp": None
            }
            proposals.append(proposal)

            # Post proposal to progress board
            self.progress_board.post_update(
                agent_name=agent.name,
                message="Proposed autonomous contribution",
                update_type="proposal"
            )

        # Execute tasks based on proposals
        await self.execute_agent_tasks_autonomously(proposals)

    async def run_collaborative_delegation(self, main_task: str):
        """Collaborative delegation: Agents negotiate task distribution."""
        print("\nü§ù COLLABORATIVE DELEGATION")
        print("Agents negotiating task distribution through progress board...")

        # Round 1: Initial proposals
        await self.collaborative_round("initial_proposal", main_task)

        # Round 2: Negotiation and adjustment
        await self.collaborative_round("negotiation", main_task)

        # Round 3: Final agreement
        await self.collaborative_round("final_agreement", main_task)

        # Execute collaboratively agreed tasks
        await self.execute_agent_tasks_collaboratively()

    async def collaborative_round(self, round_type: str, main_task: str):
        """Execute one round of collaborative negotiation."""
        print(f"\nüîÑ Collaborative Round: {round_type}")

        for agent in self.agents:
            # Read what other agents have posted
            recent_updates = self.progress_board.read_updates(limit=10)

            round_prompt = f"""
            This is a collaborative round: {round_type}

            MAIN TASK: {main_task}

            COLLABORATION PROMPT: {self.collaboration_prompt}

            RECENT TEAM UPDATES:
            {json.dumps(recent_updates, indent=2)}

            Based on the collaboration prompt and what your teammates have shared:

            For {round_type}:
            """

            if round_type == "initial_proposal":
                round_prompt += """
                1. Propose what you want to work on
                2. Identify what you need from teammates
                3. Specify what interfaces you'll provide
                """
            elif round_type == "negotiation":
                round_prompt += """
                1. Respond to teammates' proposals
                2. Suggest adjustments or alternatives
                3. Identify potential conflicts or overlaps
                4. Propose solutions for better coordination
                """
            elif round_type == "final_agreement":
                round_prompt += """
                1. Confirm your final responsibilities
                2. List dependencies on other agents
                3. Commit to specific deliverables and timeline
                4. Specify how you'll coordinate during development
                """

            print(f"üí¨ {agent.name} participating in {round_type}...")
            response = await agent.execute(round_prompt)

            # Post to progress board
            self.progress_board.post_update(
                agent_name=agent.name,
                message=f"Response to {round_type}",
                update_type=round_type
            )

    async def execute_agent_tasks_sequentially(self):
        """Execute tasks sequentially based on hierarchical delegation."""
        print("\n‚ö° Executing tasks sequentially...")

        for agent in self.agents:
            await self.execute_single_agent_flutter_work(agent)

    async def execute_agent_tasks_autonomously(self, proposals: List[Dict]):
        """Execute tasks autonomously in parallel."""
        print("\n‚ö° Executing tasks autonomously in parallel...")

        # Create tasks for parallel execution
        tasks = []
        for agent in self.agents:
            task = self.execute_single_agent_flutter_work(agent)
            tasks.append(task)

        # Execute all agent tasks in parallel
        await asyncio.gather(*tasks)

    async def execute_agent_tasks_collaboratively(self):
        """Execute tasks with ongoing collaboration."""
        print("\n‚ö° Executing tasks with ongoing collaboration...")

        # Execute with coordination checkpoints
        for i, agent in enumerate(self.agents):
            await self.execute_single_agent_flutter_work(agent)

            # After each agent, allow others to react and coordinate
            if i < len(self.agents) - 1:
                await self.coordination_checkpoint()

    async def coordination_checkpoint(self):
        """Allow agents to coordinate and adjust based on progress."""
        print("\nüîÑ Coordination checkpoint...")

        for agent in self.agents:
            recent_updates = self.progress_board.read_updates(limit=5)

            coord_prompt = f"""
            Based on recent progress updates from your teammates, do you need to:
            1. Adjust your current work?
            2. Provide help to any teammate?
            3. Request clarification or assistance?
            4. Share any important updates or interfaces?

            RECENT UPDATES:
            {json.dumps(recent_updates, indent=2)}

            COLLABORATION PROMPT: {self.collaboration_prompt}

            Respond briefly with any coordination actions needed.
            """

            response = await agent.execute(coord_prompt)

            self.progress_board.post_update(
                agent_name=agent.name,
                message="Coordination checkpoint response",
                update_type="coordination"
            )

    async def execute_single_agent_flutter_work(self, agent: UniversalAgent):
        """Have an agent create their assigned Flutter components."""
        print(f"\nüõ†Ô∏è {agent.name} creating Flutter components...")

        # Agent reads collaboration prompt and recent updates to understand their role
        recent_updates = self.progress_board.read_updates(limit=10)

        work_prompt = f"""
        Now create the actual Flutter code for your assigned responsibilities.

        COLLABORATION PROMPT: {self.collaboration_prompt}

        RECENT TEAM UPDATES:
        {json.dumps(recent_updates, indent=2)}

        PROJECT STRUCTURE:
        {self.flutter_project_path}/
        ‚îú‚îÄ‚îÄ lib/
        ‚îÇ   ‚îú‚îÄ‚îÄ main.dart
        ‚îÇ   ‚îú‚îÄ‚îÄ models/
        ‚îÇ   ‚îú‚îÄ‚îÄ services/
        ‚îÇ   ‚îú‚îÄ‚îÄ screens/
        ‚îÇ   ‚îú‚îÄ‚îÄ widgets/
        ‚îÇ   ‚îú‚îÄ‚îÄ providers/
        ‚îÇ   ‚îî‚îÄ‚îÄ utils/

        Based on your role and the collaboration agreements:

        1. Create 2-3 complete Flutter files with full implementation
        2. Follow the collaboration rules about interfaces and dependencies
        3. Write clean, working Dart code with proper documentation
        4. Ensure your code integrates well with teammates' work
        5. Include any necessary imports and proper Flutter patterns

        For each file you create:
        - Specify the file path (e.g., lib/models/track.dart)
        - Provide complete, working Dart code
        - Add comments explaining key functionality
        - Follow Flutter best practices

        Create real, functional Flutter code that demonstrates your specialty!
        """

        response = await agent.execute(work_prompt)

        # Parse the response and create actual files
        await self.create_flutter_files_from_response(agent, response.get('output', ''))

        # Update progress
        self.progress_board.post_update(
            agent_name=agent.name,
            message="Completed Flutter component development",
            update_type="development_complete"
        )

    async def create_flutter_files_from_response(self, agent: UniversalAgent, response: str):
        """Extract Flutter code from agent response and create files."""
        print(f"üìÅ Creating files from {agent.name}'s response...")

        # Simple extraction - look for file paths and code blocks
        lines = response.split('\n')
        current_file = None
        current_code = []

        for line in lines:
            # Look for file path indicators
            if any(x in line.lower() for x in ['lib/', 'file:', 'path:', '.dart']):
                # Save previous file if exists
                if current_file and current_code:
                    await self.save_flutter_file(current_file, '\n'.join(current_code))

                # Extract file path
                if 'lib/' in line:
                    parts = line.split('lib/')
                    if len(parts) > 1:
                        file_path = 'lib/' + parts[1].split()[0].replace('`', '').replace(':', '')
                        current_file = file_path
                        current_code = []
                        print(f"  üìù Found file: {current_file}")

            # Look for Dart code
            elif current_file and (line.strip().startswith(('import ', 'class ', 'enum ', 'void main', 'abstract ')) or
                                  (current_code and line.strip())):
                current_code.append(line)

        # Save last file
        if current_file and current_code:
            await self.save_flutter_file(current_file, '\n'.join(current_code))

    async def save_flutter_file(self, file_path: str, content: str):
        """Save Flutter file to project directory."""
        full_path = self.flutter_project_path / file_path
        full_path.parent.mkdir(parents=True, exist_ok=True)

        # Clean up content
        content = content.strip()
        if content and not content.startswith('//') and ('class ' in content or 'import ' in content or 'void main' in content):
            with open(full_path, 'w') as f:
                f.write(content)
            print(f"  ‚úÖ Created: {file_path}")

            # Post file creation to progress board
            self.progress_board.post_update(
                agent_name="System",
                message=f"Created Flutter file: {file_path}",
                update_type="file_created"
            )

    async def generate_final_report(self):
        """Generate final collaboration and project report."""
        print("\nüìä Generating Final Report...")

        # Count created files
        lib_dir = self.flutter_project_path / "lib"
        created_files = []
        if lib_dir.exists():
            for dart_file in lib_dir.rglob("*.dart"):
                if dart_file.stat().st_size > 0:  # Non-empty files
                    created_files.append(str(dart_file.relative_to(self.flutter_project_path)))

        # Get all progress board updates
        all_updates = self.progress_board.read_updates(limit=50)

        # Ensure all_updates is a list and handle format properly
        if isinstance(all_updates, dict) and 'updates' in all_updates:
            updates_list = all_updates['updates']
        elif isinstance(all_updates, list):
            updates_list = all_updates
        else:
            updates_list = []

        report = {
            "strategy": self.strategy,
            "collaboration_prompt_used": self.collaboration_prompt,
            "agents_involved": [agent.name for agent in self.agents],
            "files_created": created_files,
            "total_updates": len(updates_list),
            "coordination_events": len([u for u in updates_list if isinstance(u, dict) and u.get('update_type') in ['coordination', 'proposal', 'negotiation']]),
            "development_events": len([u for u in updates_list if isinstance(u, dict) and u.get('update_type') == 'development_complete']),
            "project_path": str(self.flutter_project_path)
        }

        # Save report
        report_path = self.workspace_dir / f"collaboration_report_{self.strategy}.json"
        with open(report_path, 'w') as f:
            json.dump(report, f, indent=2)

        print(f"\nüéØ COLLABORATION DEMO COMPLETE!")
        print("=" * 50)
        print(f"Strategy Used: {self.strategy.upper()}")
        print(f"Files Created: {len(created_files)}")
        print(f"Collaboration Events: {report['coordination_events']}")
        print(f"Flutter Project: {self.flutter_project_path}")
        print(f"Full Report: {report_path}")

        if created_files:
            print(f"\nüìÅ Flutter Files Created:")
            for file in created_files:
                print(f"  ‚úÖ {file}")

        return report


async def main():
    """Main demo function."""
    parser = argparse.ArgumentParser(description="Flutter Music App Collaborative Creation Demo")
    parser.add_argument("--strategy", choices=["hierarchical", "autonomous", "collaborative"],
                       default="collaborative", help="Delegation strategy to demonstrate")
    parser.add_argument("--workspace", default="./demo_workspace",
                       help="Workspace directory for the demo")

    args = parser.parse_args()

    print(f"üéµ Flutter Music App Collaborative Creation Demo")
    print(f"üéØ Strategy: {args.strategy.upper()}")
    print(f"üìÅ Workspace: {args.workspace}")
    print("=" * 60)

    # Create demo instance
    demo = FlutterAppCreationDemo(
        workspace_dir=args.workspace,
        strategy=args.strategy
    )

    try:
        # Initialize Flutter project
        await demo.initialize_flutter_project()

        # Demonstrate collaboration strategies
        await demo.demonstrate_collaboration_strategies()

        # Generate final report
        await demo.generate_final_report()

    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())

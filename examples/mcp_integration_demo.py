"""
Example: Complete MCP integration demonstration.

This example shows a complete MCP integration scenario:
1. Creates two separate MultiAgenticSwarm systems
2. System A acts as an MCP server, exposing its tools
3. System B acts as an MCP client, connecting to System A
4. Demonstrates bidirectional tool usage and agent collaboration

This is useful for:
- Testing MCP integration
- Understanding how different systems can share tools
- Demonstrating multi-system agent workflows
"""

import asyncio
import time
from multiagenticswarm import System, Agent
from multiagenticswarm.core.base_tool import FunctionTool, ToolScope


def create_file_tools():
    """Create file management tools for System A."""
    
    # Simple in-memory file system for demo
    file_storage = {}
    
    def save_file(filename: str, content: str) -> str:
        """Save content to a file."""
        file_storage[filename] = content
        return f"File '{filename}' saved successfully. Size: {len(content)} characters."
    
    def load_file(filename: str) -> str:
        """Load content from a file."""
        if filename in file_storage:
            return file_storage[filename]
        else:
            return f"Error: File '{filename}' not found. Available files: {list(file_storage.keys())}"
    
    def list_files() -> str:
        """List all available files."""
        if file_storage:
            files_info = []
            for filename, content in file_storage.items():
                files_info.append(f"{filename} ({len(content)} chars)")
            return f"Available files: {', '.join(files_info)}"
        else:
            return "No files available."
    
    # Create tools
    save_tool = FunctionTool(
        func=save_file,
        name="save_file",
        description="Save content to a file in the storage system",
        parameters={
            "type": "object",
            "properties": {
                "filename": {"type": "string", "description": "Name of the file to save"},
                "content": {"type": "string", "description": "Content to save in the file"}
            },
            "required": ["filename", "content"]
        }
    )
    
    load_tool = FunctionTool(
        func=load_file,
        name="load_file",
        description="Load content from a file in the storage system",
        parameters={
            "type": "object",
            "properties": {
                "filename": {"type": "string", "description": "Name of the file to load"}
            },
            "required": ["filename"]
        }
    )
    
    list_tool = FunctionTool(
        func=list_files,
        name="list_files",
        description="List all available files in the storage system",
        parameters={"type": "object", "properties": {}}
    )
    
    # Set all as global so they can be exposed via MCP
    save_tool.set_global()
    load_tool.set_global()
    list_tool.set_global()
    
    return [save_tool, load_tool, list_tool]


def create_analysis_tools():
    """Create data analysis tools for System B."""
    
    def analyze_text(text: str, analysis_type: str = "word_count") -> str:
        """Analyze text with various metrics."""
        
        if analysis_type == "word_count":
            words = text.split()
            return f"Word count: {len(words)}"
        
        elif analysis_type == "char_count":
            return f"Character count: {len(text)} (including spaces)"
        
        elif analysis_type == "summary":
            words = text.split()
            sentences = text.split('.')
            return f"Summary: {len(words)} words, {len(sentences)} sentences, {len(text)} characters"
        
        elif analysis_type == "keywords":
            words = text.lower().split()
            word_freq = {}
            for word in words:
                # Simple word cleaning
                word = word.strip('.,!?()[]{}":;')
                if len(word) > 3:  # Only words longer than 3 chars
                    word_freq[word] = word_freq.get(word, 0) + 1
            
            # Get top 5 words
            top_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:5]
            keywords = [f"{word}({count})" for word, count in top_words]
            return f"Top keywords: {', '.join(keywords)}"
        
        else:
            return f"Unknown analysis type: {analysis_type}"
    
    def format_report(title: str, data: str, format_type: str = "markdown") -> str:
        """Format data into a structured report."""
        
        if format_type == "markdown":
            return f"""# {title}

## Analysis Results

{data}

---
*Report generated by MultiAgenticSwarm Analysis Tools*
"""
        
        elif format_type == "plain":
            return f"{title}\n{'=' * len(title)}\n\n{data}\n\nReport generated by MultiAgenticSwarm Analysis Tools"
        
        elif format_type == "json":
            import json
            report = {
                "title": title,
                "data": data,
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "generator": "MultiAgenticSwarm Analysis Tools"
            }
            return json.dumps(report, indent=2)
        
        else:
            return f"Unknown format type: {format_type}"
    
    # Create tools
    analyze_tool = FunctionTool(
        func=analyze_text,
        name="analyze_text",
        description="Analyze text with various metrics (local tool)",
        parameters={
            "type": "object",
            "properties": {
                "text": {"type": "string", "description": "Text to analyze"},
                "analysis_type": {
                    "type": "string",
                    "enum": ["word_count", "char_count", "summary", "keywords"],
                    "description": "Type of analysis to perform",
                    "default": "word_count"
                }
            },
            "required": ["text"]
        }
    )
    
    format_tool = FunctionTool(
        func=format_report,
        name="format_report",
        description="Format data into a structured report (local tool)",
        parameters={
            "type": "object",
            "properties": {
                "title": {"type": "string", "description": "Report title"},
                "data": {"type": "string", "description": "Data to include in report"},
                "format_type": {
                    "type": "string",
                    "enum": ["markdown", "plain", "json"],
                    "description": "Report format",
                    "default": "markdown"
                }
            },
            "required": ["title", "data"]
        }
    )
    
    # Set as global
    analyze_tool.set_global()
    format_tool.set_global()
    
    return [analyze_tool, format_tool]


async def setup_system_a():
    """Set up System A (MCP Server) with file management tools."""
    
    print("🔧 Setting up System A (File Management Server)...")
    
    # Create system A
    system_a = System(enable_logging=True, verbose=False)
    
    # Add file management tools
    file_tools = create_file_tools()
    for tool in file_tools:
        system_a.tool_executor.register_tool(tool)
    
    # Create an agent for System A
    agent_a = Agent(
        name="FileManager",
        description="Agent specialized in file management operations",
        system_prompt="You are a file management agent. You can save, load, and list files. Always confirm operations and provide clear feedback.",
        llm_provider="openai",
        llm_model="gpt-3.5-turbo"
    )
    system_a.register_agent(agent_a)
    
    # Set up MCP server
    mcp_server = system_a.register_mcp_server(
        name="FileManagement-Server",
        host="localhost",
        port=8766,  # Different port to avoid conflicts
        transport="websocket",
        expose_global_tools=True
    )
    
    await system_a.start_mcp_server("FileManagement-Server")
    
    print(f"✅ System A ready:")
    print(f"   - {len(system_a.tool_executor.get_all_tools())} tools available")
    print(f"   - MCP server running on ws://localhost:8766")
    print(f"   - Exposed tools: {', '.join([t.name for t in mcp_server.get_tool_descriptors()])}")
    
    return system_a, agent_a


async def setup_system_b():
    """Set up System B (MCP Client) with analysis tools."""
    
    print("\n🔧 Setting up System B (Analysis Client)...")
    
    # Create system B
    system_b = System(enable_logging=True, verbose=False)
    
    # Add analysis tools (local to system B)
    analysis_tools = create_analysis_tools()
    for tool in analysis_tools:
        system_b.tool_executor.register_tool(tool)
    
    # Create an agent for System B
    agent_b = Agent(
        name="DataAnalyst",
        description="Agent specialized in data analysis and reporting",
        system_prompt="You are a data analyst agent. You can analyze text, generate reports, and work with files. Use available tools to provide comprehensive analysis.",
        llm_provider="openai",
        llm_model="gpt-3.5-turbo"
    )
    system_b.register_agent(agent_b)
    
    print(f"✅ System B initialized:")
    print(f"   - {len(system_b.tool_executor.get_all_tools())} local tools available")
    
    # Connect to System A as MCP client
    print(f"   - Connecting to System A's MCP server...")
    
    # Wait a moment for server to be ready
    await asyncio.sleep(1)
    
    mcp_client = await system_b.connect_mcp_client(
        name="file-management-server",
        server_url="ws://localhost:8766",
        transport="websocket",
        register_tools=True,
        tool_scope="global"
    )
    
    print(f"✅ System B connected to System A:")
    print(f"   - {len(system_b.tool_executor.get_all_tools())} total tools available")
    print(f"   - Remote tools: {', '.join(mcp_client.get_available_tools())}")
    
    return system_b, agent_b, mcp_client


async def demonstrate_collaboration(system_a, agent_a, system_b, agent_b):
    """Demonstrate collaboration between the two systems."""
    
    print(f"\n🤝 Demonstrating Inter-System Collaboration")
    print("=" * 50)
    
    # Step 1: System A creates and saves a document
    print(f"\n1. System A (FileManager) creating a document...")
    
    document_content = """Welcome to MultiAgenticSwarm MCP Integration!

This document demonstrates how different systems can share tools through the Model Context Protocol.

System A provides file management capabilities:
- Saving files to storage
- Loading files from storage  
- Listing available files

System B provides analysis capabilities:
- Text analysis (word count, keywords, etc.)
- Report formatting (markdown, plain text, JSON)

Together, they can create powerful workflows that span multiple systems!

Key benefits of MCP integration:
1. Tool sharing across different systems
2. Scalable architecture with specialized services
3. Standardized protocol for interoperability
4. Seamless agent collaboration

This is just the beginning of what's possible with MultiAgenticSwarm and MCP!
"""
    
    result_a = await system_a.execute_agent(
        agent_name=agent_a.name,
        input_text=f"Save this content to a file called 'mcp_demo.txt': {document_content}",
        context={"step": "file_creation"}
    )
    
    print(f"   Result: {result_a.get('result', {}).get('output', 'No output')[:100]}...")
    
    # Step 2: System A lists files to confirm
    print(f"\n2. System A listing files to confirm...")
    
    result_a2 = await system_a.execute_agent(
        agent_name=agent_a.name,
        input_text="List all available files in the storage system.",
        context={"step": "file_listing"}
    )
    
    print(f"   Result: {result_a2.get('result', {}).get('output', 'No output')}")
    
    # Step 3: System B loads the file using remote tools
    print(f"\n3. System B (DataAnalyst) loading the document using remote tools...")
    
    result_b1 = await system_b.execute_agent(
        agent_name=agent_b.name,
        input_text="Use the load_file tool to load the content of 'mcp_demo.txt'.",
        context={"step": "remote_file_load"}
    )
    
    print(f"   Result: {result_b1.get('result', {}).get('output', 'No output')[:100]}...")
    
    # Step 4: System B analyzes the content using local tools
    print(f"\n4. System B analyzing the document content...")
    
    result_b2 = await system_b.execute_agent(
        agent_name=agent_b.name,
        input_text="First load 'mcp_demo.txt', then analyze it for keywords and generate a summary. Finally, format the analysis as a markdown report titled 'MCP Demo Analysis'.",
        context={"step": "content_analysis"}
    )
    
    print(f"   Result: {result_b2.get('result', {}).get('output', 'No output')[:200]}...")
    
    # Step 5: System B saves the analysis back using remote tools
    print(f"\n5. System B saving analysis report using remote tools...")
    
    result_b3 = await system_b.execute_agent(
        agent_name=agent_b.name,
        input_text="Load 'mcp_demo.txt', analyze it for a complete summary with keywords, format it as a markdown report titled 'MCP Integration Analysis Report', and then save the report as 'analysis_report.md' using the save_file tool.",
        context={"step": "save_analysis"}
    )
    
    print(f"   Result: {result_b3.get('result', {}).get('output', 'No output')[:200]}...")
    
    # Step 6: System A confirms the new files
    print(f"\n6. System A confirming all files are now available...")
    
    result_a3 = await system_a.execute_agent(
        agent_name=agent_a.name,
        input_text="List all files and show me the content of 'analysis_report.md' if it exists.",
        context={"step": "final_confirmation"}
    )
    
    print(f"   Result: {result_a3.get('result', {}).get('output', 'No output')[:300]}...")


async def main():
    """Main function to run the complete MCP integration demo."""
    
    print("🌟 MultiAgenticSwarm MCP Integration Demo")
    print("=" * 60)
    print("This demo shows two systems sharing tools via MCP protocol:")
    print("  • System A: File Management (MCP Server)")
    print("  • System B: Data Analysis (MCP Client)")
    print("=" * 60)
    
    system_a = None
    system_b = None
    
    try:
        # Set up both systems
        system_a, agent_a = await setup_system_a()
        system_b, agent_b, mcp_client = await setup_system_b()
        
        # Show status
        print(f"\n📊 Systems Status:")
        mcp_status = system_b.get_mcp_status()
        print(f"   System A (Server): {len(system_a.list_mcp_servers())} MCP servers")
        print(f"   System B (Client): {len(system_b.list_mcp_clients())} MCP clients")
        
        # Demonstrate collaboration
        await demonstrate_collaboration(system_a, agent_a, system_b, agent_b)
        
        print(f"\n🎉 MCP Integration Demo Completed Successfully!")
        print(f"\n💡 Key Achievements:")
        print(f"   ✅ Created two independent systems")
        print(f"   ✅ Established MCP server/client connection")
        print(f"   ✅ Shared tools across systems")
        print(f"   ✅ Enabled inter-system agent collaboration")
        print(f"   ✅ Demonstrated complex multi-system workflows")
        
    except ImportError as e:
        print(f"❌ MCP integration not available: {e}")
        print(f"   Install dependencies: pip install websockets aiohttp")
    
    except Exception as e:
        print(f"❌ Error during demo: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Cleanup
        print(f"\n🧹 Cleaning up...")
        
        if system_b:
            try:
                await system_b.disconnect_mcp_client("file-management-server")
                print(f"   ✅ Disconnected MCP client")
            except Exception as e:
                print(f"   ⚠️  Error disconnecting client: {e}")
        
        if system_a:
            try:
                await system_a.stop_mcp_server("FileManagement-Server")
                print(f"   ✅ Stopped MCP server")
            except Exception as e:
                print(f"   ⚠️  Error stopping server: {e}")
        
        print(f"   ✅ Cleanup completed")


if __name__ == "__main__":
    # Check if MCP is available
    try:
        from multiagenticswarm.core.mcp_integration import MCPServer, MCPClient
        asyncio.run(main())
    except ImportError:
        print("❌ MCP integration not available")
        print("   This demo requires websockets and aiohttp:")
        print("   pip install websockets aiohttp")

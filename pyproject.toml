[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "multiagenticswarm"
version = "0.1.0"
description = "A powerful LangGraph-based multi-agent system with dynamic configuration and hierarchical tool sharing"
authors = [
    {name = "MultiAgenticSwarm Team", email = "contact@multiagenticswarm.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["ai", "agents", "langgraph", "multi-agent", "automation", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "langgraph>=0.2.0",
    "langchain>=0.2.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "langchain-aws>=0.1.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "asyncio-mqtt>=0.16.0",
    "typing-extensions>=4.5.0",
    "uuid>=1.30",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-html>=3.1.0",
    "pytest-json-report>=1.5.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-builtins>=2.1.0",
    "flake8-comprehensions>=3.12.0",
    "flake8-pytest-style>=1.7.0",
    "mypy>=1.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0",
    "radon>=6.0.0",
    "xenon>=0.9.0",
    "pydocstyle>=6.3.0",
    "interrogate>=1.5.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]
examples = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "streamlit>=1.28.0",
]

[project.urls]
Homepage = "https://github.com/multiagenticswarm/multiagenticswarm"
Repository = "https://github.com/multiagenticswarm/multiagenticswarm"
Documentation = "https://multiagenticswarm.readthedocs.io"
"Bug Tracker" = "https://github.com/multiagenticswarm/multiagenticswarm/issues"

[project.scripts]
multiagenticswarm = "multiagenticswarm.__main__:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["multiagenticswarm*"]
exclude = ["tests*", "examples*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["multiagenticswarm"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["multiagenticswarm"]
known_third_party = ["pytest", "pydantic", "langchain", "langgraph"]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True warnings in tests

[tool.bandit.assert_used]
skips = ["*_test.py", "*test*.py"]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107"]
match-dir = "multiagenticswarm"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

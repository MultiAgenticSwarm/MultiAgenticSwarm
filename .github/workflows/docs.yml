name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'multiagenticswarm/**/*.py'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme myst-parser sphinx-autodoc-typehints

      - name: Create docs structure if needed
        run: |
          mkdir -p docs
          if [ ! -f "docs/conf.py" ]; then
            cat > docs/conf.py << 'EOF'
          # Configuration file for the Sphinx documentation builder.

          import os
          import sys
          sys.path.insert(0, os.path.abspath('..'))

          project = 'MultiAgenticSwarm'
          copyright = '2025, MultiAgenticSwarm Team'
          author = 'MultiAgenticSwarm Team'

          extensions = [
              'sphinx.ext.autodoc',
              'sphinx.ext.viewcode',
              'sphinx.ext.napoleon',
              'sphinx.ext.intersphinx',
              'myst_parser',
          ]

          templates_path = ['_templates']
          exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

          html_theme = 'sphinx_rtd_theme'
          html_static_path = ['_static']

          autodoc_default_options = {
              'members': True,
              'member-order': 'bysource',
              'special-members': '__init__',
              'undoc-members': True,
              'exclude-members': '__weakref__'
          }

          intersphinx_mapping = {
              'python': ('https://docs.python.org/3', None),
              'langchain': ('https://python.langchain.com/docs/', None),
          }
          EOF
          fi

          if [ ! -f "docs/index.rst" ]; then
            cat > docs/index.rst << 'EOF'
          MultiAgenticSwarm Documentation
          ==============================

          Welcome to MultiAgenticSwarm's documentation!

          .. toctree::
             :maxdepth: 2
             :caption: Contents:

             installation
             quickstart
             api/modules
             examples
             contributing


          Indices and tables
          ==================

          * :ref:`genindex`
          * :ref:`modindex`
          * :ref:`search`
          EOF
          fi

      - name: Generate API documentation
        run: |
          cd docs
          sphinx-apidoc -o api ../multiagenticswarm --force --module-first

      - name: Build documentation
        run: |
          cd docs
          sphinx-build -b html . _build/html

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Download documentation artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: ./docs

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  check-links:
    name: Check Documentation Links
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download documentation artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: ./docs

      - name: Check links
        uses: lycheeverse/lychee-action@v1
        with:
          args: './docs/**/*.html'
          fail: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-readme:
    name: Validate README
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate README structure
        run: |
          # Check if README.md exists and has required sections
          if [ ! -f "README.md" ]; then
            echo "ERROR: README.md not found"
            exit 1
          fi

          # Check for required sections
          sections=("Features" "Installation" "Quick Start" "Documentation" "Contributing" "License")
          for section in "${sections[@]}"; do
            if ! grep -q "## .*$section" README.md && ! grep -q "# .*$section" README.md; then
              echo "WARNING: Section '$section' not found in README.md"
            fi
          done

          echo "README.md validation completed"

      - name: Check README links
        uses: lycheeverse/lychee-action@v1
        with:
          args: 'README.md'
          fail: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-wiki:
    name: Update GitHub Wiki
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Wiki
        run: |
          # Clone the wiki repository
          git clone https://github.com/${{ github.repository }}.wiki.git wiki || {
            echo "Wiki not initialized, skipping wiki update"
            exit 0
          }

          cd wiki

          # Update Home page with README content
          if [ -f "../README.md" ]; then
            cp ../README.md Home.md
          fi

          # Create additional wiki pages
          cat > API-Reference.md << 'EOF'
          # API Reference

          For detailed API documentation, visit our [GitHub Pages documentation](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/).

          ## Core Components

          - **Agent**: The main agent class for creating AI agents
          - **Tool**: Base class for creating tools
          - **Task**: Task management and execution
          - **System**: Main system orchestrator

          EOF

          # Commit and push changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Update wiki from main branch"
            git push
          fi

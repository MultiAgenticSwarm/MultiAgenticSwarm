name: CD

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}

          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if prerelease (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "Releasing version: $VERSION"
          echo "Is prerelease: ${{ steps.version.outputs.is_prerelease }}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: x.y.z or x.y.z-suffix"
            exit 1
          fi

  run-tests:
    name: Run Full Test Suite
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    environment: release
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml

          # Also update __init__.py if it has a version
          if grep -q "__version__" multiagenticswarm/__init__.py; then
            sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" multiagenticswarm/__init__.py
          fi

      - name: Build package
        run: |
          python -m build
          ls -la dist/

      - name: Check package
        run: |
          twine check dist/*

          # Additional checks
          python -m pip install dist/*.whl
          python -c "import multiagenticswarm; print(f'Version: {multiagenticswarm.__version__}')"

      - name: Publish to Test PyPI
        if: needs.validate-release.outputs.is_prerelease == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          twine upload --repository testpypi dist/*

      - name: Publish to PyPI
        if: needs.validate-release.outputs.is_prerelease == 'false'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

      - name: Upload release assets
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/
          asset_name: multiagenticswarm-${{ needs.validate-release.outputs.version }}-dist.zip
          asset_content_type: application/zip

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi

          # Save changelog to file
          cat > changelog.md << EOF
          ## What's Changed

          $CHANGELOG

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v${VERSION}
          EOF

          echo "changelog-file=changelog.md" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body_path: ${{ steps.changelog.outputs.changelog-file }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    if: needs.validate-release.outputs.is_prerelease == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Update documentation version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Update version in documentation files
          find docs/ -name "*.md" -o -name "*.rst" | xargs sed -i "s/version: .*/version: $VERSION/g" || true

          # Update any version references in README
          sed -i "s/multiagenticswarm==.*/multiagenticswarm==$VERSION/" README.md || true

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet; then
            echo "No documentation changes to commit"
          else
            git add -A
            git commit -m "docs: update version to ${{ needs.validate-release.outputs.version }}"
            git push
          fi

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish, create-github-release]
    if: always()

    steps:
      - name: Notify on success
        if: needs.build-and-publish.result == 'success'
        run: |
          echo "üéâ Successfully released MultiAgenticSwarm v${{ needs.validate-release.outputs.version }}"
          echo "üì¶ Package published to PyPI"
          echo "üê≥ Docker image pushed to GitHub Container Registry"
          echo "üìã GitHub release created"

      - name: Notify on failure
        if: needs.build-and-publish.result == 'failure'
        run: |
          echo "‚ùå Failed to release MultiAgenticSwarm v${{ needs.validate-release.outputs.version }}"
          echo "Please check the logs and try again"
          exit 1
